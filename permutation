#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>

using namespace std;

void nextPermutation(std::vector<int>& nums) {
    int len = nums.size();
    int i = len - 2;

    while (i >= 0 && nums[i] >= nums[i + 1]) {
        i--;
    }

    //ensure number at index i is greater then the next number 
    //if it's not, where number at i is smaller than next (ascending), break the while loop
    //1[2]3 Here, at i, it's 2, as 3 is greater than 3 and it breaks the loop. 

    if (i >= 0) {
        int j = len - 1; 
        //The last number is at position j
        while (j > i && nums[j] <= nums[i]) {
            //as long as j is greater than i, and the number at its position smaller than 
            //that at position i 
            //[1]2[3], at j, it's 3, which breaks the loop 

            j--;
        }
        //cut off while loop if number at position j is greater than that at i. 
        //here

        swap(nums[i], nums[j]);
        //2 swap with 3 --> 1[3][2]
        //ij, ji
    } 
    reverse(nums.begin() + i + 1, nums.end());
    //else, when i < 0 --> basically it's already the largest [already descending]
} 

void reverseSort(vector<int>& reverseNums) {
    for (int j: reverseNums) {
        for (int k = 0; k < reverseNums.size() - 1; k++) {
            if (reverseNums[k] < reverseNums[k+1]){
                int prev = reverseNums[k];
                int after = reverseNums[k+1];
                reverseNums[k] = after;
                reverseNums[k+1] = prev; 
            }
        }
    }
}

int main() { 
    vector<int> nums = {1,2,3};
    string elem;

    for (auto i : nums) {
          char c = i + '0';
        elem += c;
    }

    vector<string> permNums = {elem};

    vector<int> reverseNums = nums; 
    reverseSort(reverseNums);
  
    while (nums != reverseNums) {

        nextPermutation(nums);
        string permE;

        for (auto k : nums) {
          char c = k + '0';
            permE += c;
        }
        permNums.push_back(permE);
    }

    for (string j: permNums) {cout << j << endl;}
    
}
